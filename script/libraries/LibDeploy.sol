// SPDX-License-Identifier: GPL-3.0-or-later

pragma solidity 0.8.14;

import "forge-std/Vm.sol";
import "kernel/src/Kernel.sol";
import "forge-std/console.sol";

import { IDeployer } from "../../src/interfaces/IDeployer.sol";
import { ISoul } from "../../src/interfaces/ISoul.sol";
import { ISubscribeDeployer } from "../../src/interfaces/ISubscribeDeployer.sol";
import { IEntryPoint } from "account-abstraction/interfaces/IEntryPoint.sol";
import { Clones } from "openzeppelin-contracts/contracts/proxy/Clones.sol";
import { ERC1967Proxy } from "openzeppelin-contracts/contracts/proxy/ERC1967/ERC1967Proxy.sol";
import { TimelockController } from "openzeppelin-contracts/contracts/governance/TimelockController.sol";
import { ECDSAValidator } from "kernel/src/validator/ECDSAValidator.sol";
import { IERC721 } from "openzeppelin-contracts/contracts/token/ERC721/IERC721.sol";
import { CyberAccountFactory } from "../../src/factory/CyberAccountFactory.sol";
import { Soul } from "../../src/core/Soul.sol";
import { MiddlewareManager } from "../../src/core/MiddlewareManager.sol";
import { Content } from "../../src/core/Content.sol";
import { Essence } from "../../src/core/Essence.sol";
import { W3st } from "../../src/core/W3st.sol";
import { Subscribe } from "../../src/core/Subscribe.sol";
import { TokenReceiver } from "../../src/periphery/TokenReceiver.sol";
import { CyberEngine } from "../../src/core/CyberEngine.sol";
import { DeploySetting } from "./DeploySetting.sol";
import { LibString } from "../../src/libraries/LibString.sol";
import { DataTypes } from "../../src/libraries/DataTypes.sol";
import { Create2Deployer } from "../../src/deployer/Create2Deployer.sol";
import { Deployer } from "../../src/deployer/Deployer.sol";
import { SubscribeDeployer } from "../../src/deployer/SubscribeDeployer.sol";
import { Treasury } from "../../src/middlewares/base/Treasury.sol";
import { PermissionMw } from "../../src/middlewares/PermissionMw.sol";
import { LimitedOnlyOnceMw } from "../../src/middlewares/LimitedOnlyOnceMw.sol";
import { SpecialReward } from "../../src/periphery/SpecialReward.sol";
import { CyberVault } from "../../src/periphery/CyberVault.sol";
import { LaunchTokenPool } from "../../src/periphery/LaunchTokenPool.sol";
import { CyberStakingPool } from "../../src/periphery/CyberStakingPool.sol";
import { CyberVaultV2 } from "../../src/periphery/CyberVaultV2.sol";
import { CyberVaultV3 } from "../../src/periphery/CyberVaultV3.sol";
import { WorkInCryptoNFT } from "../../src/periphery/WorkInCryptoNFT.sol";
import { CyberNFTGate } from "../../src/periphery/CyberNFTGate.sol";
import { CyberProjectNFTV2 } from "../../src/periphery/CyberProjectNFTV2.sol";
import { SSBonusWeek } from "../../src/periphery/SSBonusWeek.sol";
import { GasBridge } from "../../src/periphery/GasBridge.sol";
import { CyberNewEraGate } from "../../src/periphery/CyberNewEraGate.sol";
import { CyberNewEra } from "../../src/periphery/CyberNewEra.sol";
import { CyberRelayer } from "../../src/periphery/CyberRelayer.sol";
import { CyberPaymaster } from "../../src/paymaster/CyberPaymaster.sol";
import { UUPSUpgradeable } from "openzeppelin-contracts/contracts/proxy/utils/UUPSUpgradeable.sol";
import { CyberFrog } from "../../src/periphery/CyberFrog.sol";
import { CyberRelayGate } from "../../src/periphery/CyberRelayGate.sol";
import { CyberMintNFTRelayHook } from "../../src/periphery/CyberMintNFTRelayHook.sol";
import { CyberNFT } from "../../src/periphery/CyberNFT.sol";
import { CyberIDPermissionedRelayHook } from "../../src/periphery/CyberIDPermissionedRelayHook.sol";
import { SnakeRelayHook } from "../../src/periphery/SnakeRelayHook.sol";
import { AggregatorV3Interface } from "../../src/interfaces/AggregatorV3Interface.sol";
import { CyberNFTV2 } from "../../src/periphery/CyberNFTV2.sol";

library LibDeploy {
    // create2 deploy all contract with this protocol salt
    bytes32 constant SALT = keccak256(bytes("CCV3"));

    string internal constant OUTPUT_FILE = "docs/deploy/";

    address constant EXPECTED_MULTICALL_ADDRESS =
        0x8ae01fCF7c655655fF2c6Ef907b8B4718Ab4e17c;
    address constant DETERMINISTIC_DEPLOYER =
        0x4e59b44847b379578588920cA78FbF26c0B4956C;

    function _fileName() internal view returns (string memory) {
        uint256 chainId = block.chainid;
        string memory chainName;
        if (chainId == 1) chainName = "eth";
        else if (chainId == 80001) chainName = "mumbai";
        else if (chainId == 137) chainName = "polygon";
        else if (chainId == 420) chainName = "op_goerli";
        else if (chainId == 84531) chainName = "base_goerli";
        else if (chainId == 59140) chainName = "linea_goerli";
        else if (chainId == 534351) chainName = "scroll_sepolia";
        else if (chainId == 59144) chainName = "linea";
        else if (chainId == 56) chainName = "bnb";
        else if (chainId == 10) chainName = "op";
        else if (chainId == 42161) chainName = "arbitrum";
        else if (chainId == 421613) chainName = "arbitrum_goerli";
        else if (chainId == 97) chainName = "bnbt";
        else if (chainId == 8453) chainName = "base";
        else if (chainId == 5611) chainName = "opbnbt";
        else if (chainId == 204) chainName = "opbnb";
        else if (chainId == 534352) chainName = "scroll";
        else if (chainId == 11155111) chainName = "sepolia";
        else if (chainId == 5000) chainName = "mantle";
        else if (chainId == 5001) chainName = "mantle_testnet";
        else if (chainId == 168587773) chainName = "blast_sepolia";
        else if (chainId == 11155420) chainName = "op_sepolia";
        else if (chainId == 84532) chainName = "base_sepolia";
        else if (chainId == 81457) chainName = "blast";
        else if (chainId == 111557560) chainName = "cyber_testnet";
        else if (chainId == 80002) chainName = "amoy";
        else if (chainId == 13473) chainName = "imx_testnet";
        else if (chainId == 7560) chainName = "cyber";
        else if (chainId == 33111) chainName = "ape_testnet";
        else chainName = "unknown";
        return
            string(
                abi.encodePacked(
                    OUTPUT_FILE,
                    string(
                        abi.encodePacked(
                            chainName,
                            "-",
                            LibString.toString(chainId)
                        )
                    ),
                    "/contract"
                )
            );
    }

    function _fileNameMd() internal view returns (string memory) {
        return string(abi.encodePacked(_fileName(), ".md"));
    }

    function _writeText(
        Vm vm,
        string memory fileName,
        string memory text
    ) internal {
        vm.writeLine(fileName, text);
    }

    function _writeHelper(Vm vm, string memory name, address addr) internal {
        _writeText(
            vm,
            _fileNameMd(),
            string(
                abi.encodePacked(
                    "|",
                    name,
                    "|",
                    LibString.toHexString(addr),
                    "|"
                )
            )
        );
    }

    function _write(Vm vm, string memory name, address addr) internal {
        _writeHelper(vm, name, addr);
    }

    function _computeAddress(
        bytes memory _byteCode,
        bytes32 _salt,
        address deployer
    ) internal pure returns (address) {
        bytes32 hash_ = keccak256(
            abi.encodePacked(
                bytes1(0xff),
                deployer,
                _salt,
                keccak256(_byteCode)
            )
        );
        return address(uint160(uint256(hash_)));
    }

    function deployMultiSend() internal {
        if (EXPECTED_MULTICALL_ADDRESS.code.length == 0) {
            (bool success, bytes memory ret) = DETERMINISTIC_DEPLOYER.call(
                hex"000000000000000000000000000000000000000000000000000000000000000060a060405234801561001057600080fd5b50306080526080516102bd61002f6000396000604f01526102bd6000f3fe60806040526004361061001e5760003560e01c80638d80ff0a14610023575b600080fd5b6100366100313660046101b8565b610038565b005b73ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000163003610101576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603060248201527f4d756c746953656e642073686f756c64206f6e6c792062652063616c6c65642060448201527f7669612064656c656761746563616c6c00000000000000000000000000000000606482015260840160405180910390fd5b805160205b81811015610184578083015160f81c6001820184015160601c60158301850151603584018601516055850187016000856000811461014b576001811461015b57610166565b6000808585888a5af19150610166565b6000808585895af491505b508061017157600080fd5b5050806055018501945050505050610106565b505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000602082840312156101ca57600080fd5b813567ffffffffffffffff808211156101e257600080fd5b818401915084601f8301126101f657600080fd5b81358181111561020857610208610189565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f0116810190838211818310171561024e5761024e610189565b8160405282815287602084870101111561026757600080fd5b82602086016020830137600092810160200192909252509594505050505056fea2646970667358221220aee0f2dd047c52784b9c7806e4078197141e146ec66587d8610576db5f8ad20e64736f6c634300080f0033"
            );
        } else {
            console.log("multisend address: %s", EXPECTED_MULTICALL_ADDRESS);
        }
    }

    function deployLimitedOnlyOnceMw(
        Vm vm,
        address _dc,
        address engine,
        address mwManager
    ) internal returns (address mw) {
        Create2Deployer dc = Create2Deployer(_dc);
        mw = dc.deploy(
            abi.encodePacked(
                type(LimitedOnlyOnceMw).creationCode,
                abi.encode(engine)
            ),
            SALT
        );
        _write(vm, "LimitedOnlyOnceMw", mw);
        MiddlewareManager(mwManager).allowMw(mw, true);
    }

    function deploySpecialReward(
        Vm vm,
        address owner,
        string memory tokenURI,
        string memory contractName
    ) internal {
        address sr = address(new SpecialReward(owner, tokenURI));
        _writeHelper(vm, contractName, sr);
    }

    function deployPermissionMw(
        Vm vm,
        address _dc,
        address engine,
        address mwManager
    ) internal returns (address permissionMw) {
        Create2Deployer dc = Create2Deployer(_dc);
        permissionMw = dc.deploy(
            abi.encodePacked(
                type(PermissionMw).creationCode,
                abi.encode(engine)
            ),
            SALT
        );
        _write(vm, "PermissionMw", permissionMw);
    }

    function deployValidator(Vm vm, address _dc) internal {
        Create2Deployer dc = Create2Deployer(_dc);
        address validator = dc.deploy(
            abi.encodePacked(type(ECDSAValidator).creationCode),
            SALT
        );
        _write(vm, "ECDSAValidator", validator);
    }

    function setSoulMinter(
        Vm,
        address soul,
        address target,
        bool isMinter
    ) internal {
        ISoul(soul).setMinter(target, isMinter);
        require(ISoul(soul).isMinter(target) == isMinter, "NOT_CORRECT_MINTER");
    }

    function withdrawGasBridge(Vm) internal {
        // GasBridge(0xFdF7c22ca4704dfEF46E7e5eF53dcA1d5a9f8E12).withdraw(
        //     address(0),
        //     0xFdF7c22ca4704dfEF46E7e5eF53dcA1d5a9f8E12.balance
        // );
        // CyberNewEraGate(0x23e235aE376F08a9C2e6d08A8Bfa8F171306A112).withdraw(
        //     address(0),
        //     0xFdF7c22ca4704dfEF46E7e5eF53dcA1d5a9f8E12.balance
        // );
        // CyberNFTGate(0xb636433D8081593b02b1ecCF1118Ad05c100e0A4).withdraw(
        //     address(0)
        // );
        // TokenReceiver(0xcd97405Fb58e94954E825E46dB192b916A45d412).withdraw(
        //     0x7884f7F04F994da14302a16Cf15E597e31eebECf,
        //     0xcd97405Fb58e94954E825E46dB192b916A45d412.balance
        // );
    }

    function deployFactory(
        Vm vm,
        address _dc,
        address entryPoint,
        address soul,
        address factoryOwner,
        bool writeFile
    ) internal returns (address factory) {
        Create2Deployer dc = Create2Deployer(_dc);
        IEntryPoint iep = IEntryPoint(entryPoint);
        factory = dc.deploy(
            abi.encodePacked(
                type(CyberAccountFactory).creationCode,
                abi.encode(iep, soul, factoryOwner)
            ),
            SALT
        );

        if (writeFile) {
            _write(vm, "CyberAccount Factory", factory);
        }
    }

    struct ContractAddresses {
        address soul;
        address manager;
        address engine;
        address engineImpl;
        address deployer;
        address subscribeDeployer;
        address deployedEssImpl;
        address deployedContentImpl;
        address deployedW3stImpl;
        address deployedSubImpl;
        address cyberTreasury;
        address cyberFactory;
        address calculatedEssImpl;
        address calculatedContentImpl;
        address calculatedW3stImpl;
        address calculatedSubImpl;
    }

    function simpleDeployAll(
        Vm vm,
        address _dc,
        address backendSigner
    ) internal {
        Create2Deployer dc = Create2Deployer(_dc);

        address soul = dc.deploy(
            hex"60806040523480156200001157600080fd5b5060405162001f0e38038062001f0e833981016040819052620000349162000269565b81816200004133620000a6565b815162000056906001906020850190620000f6565b5080516200006c906002906020840190620000f6565b5050506001600160a01b0383166000908152600c60205260409020805460ff191660011790556200009d83620000a6565b5050506200032f565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b8280546200010490620002f3565b90600052602060002090601f01602090048101928262000128576000855562000173565b82601f106200014357805160ff191683800117855562000173565b8280016001018555821562000173579182015b828111156200017357825182559160200191906001019062000156565b506200018192915062000185565b5090565b5b8082111562000181576000815560010162000186565b634e487b7160e01b600052604160045260246000fd5b600082601f830112620001c457600080fd5b81516001600160401b0380821115620001e157620001e16200019c565b604051601f8301601f19908116603f011681019082821181831017156200020c576200020c6200019c565b816040528381526020925086838588010111156200022957600080fd5b600091505b838210156200024d57858201830151818301840152908201906200022e565b838211156200025f5760008385830101525b9695505050505050565b6000806000606084860312156200027f57600080fd5b83516001600160a01b03811681146200029757600080fd5b60208501519093506001600160401b0380821115620002b557600080fd5b620002c387838801620001b2565b93506040860151915080821115620002da57600080fd5b50620002e986828701620001b2565b9150509250925092565b600181811c908216806200030857607f821691505b6020821081036200032957634e487b7160e01b600052602260045260246000fd5b50919050565b611bcf806200033f6000396000f3fe608060405234801561001057600080fd5b50600436106101d95760003560e01c8063715018a611610104578063b88d4fde116100a2578063d9a9eb2411610071578063d9a9eb2414610438578063e0df5b6f14610461578063e985e9c514610474578063f2fde38b146104a257600080fd5b8063b88d4fde146103f1578063c87b56dd146103ff578063cb4799f214610412578063cf456ae71461042557600080fd5b806395d89b41116100de57806395d89b4114610397578063a22cb4651461039f578063aa271e1a146103b2578063b33dab09146103de57600080fd5b8063715018a61461036b5780638da5cb5b146103735780638e73361e1461038457600080fd5b80630ae16e531161017c57806326ec9ad81161014b57806326ec9ad81461033257806342842e0e1461031f5780636352211e1461034557806370a082311461035857600080fd5b80630ae16e53146102b85780631ed05916146102f957806321b1d9be1461030c57806323b872dd1461031f57600080fd5b80630739d191116101b85780630739d1911461023c57806307b472c41461024f578063081812fc14610264578063095ea7b3146102a557600080fd5b8062effe81146101de57806301ffc9a71461020457806306fdde0314610227575b600080fd5b6101f16101ec3660046114de565b6104b5565b6040519081526020015b60405180910390f35b61021761021236600461151a565b61057f565b60405190151581526020016101fb565b61022f6105d1565b6040516101fb91906115a0565b61022f61024a366004611655565b61065f565b61026261025d36600461169b565b61073d565b005b61028d61027236600461169b565b6004602052600090815260409020546001600160a01b031681565b6040516001600160a01b0390911681526020016101fb565b6102626102b33660046116b4565b610798565b6102e16102c636600461169b565b6009602052600090815260409020546001600160401b031681565b6040516001600160401b0390911681526020016101fb565b6102176103073660046116de565b61086c565b61026261031a3660046114de565b6108d5565b61026261032d3660046116f9565b610976565b610262610340366004611735565b6109b5565b61028d61035336600461169b565b610afc565b6101f16103663660046116de565b610b5d565b610262610bc0565b6000546001600160a01b031661028d565b61026261039236600461169b565b610bd4565b61022f610c43565b6102626103ad3660046114de565b610c50565b6102176103c03660046116de565b6001600160a01b03166000908152600c602052604090205460ff1690565b6102626103ec366004611735565b610cbc565b61026261032d3660046117fb565b61022f61040d36600461169b565b610e14565b61022f610420366004611869565b610e7f565b6102626104333660046114de565b610f60565b6102e161044636600461169b565b6007602052600090815260409020546001600160401b031681565b61026261046f3660046118b4565b610fbc565b6102176104823660046118f5565b600560209081526000928352604080842090915290825290205460ff1681565b6102626104b03660046116de565b610fd5565b336000908152600c602052604081205460ff166105075760405162461bcd60e51b815260206004820152600b60248201526a27a7262cafa6a4a72a22a960a91b60448201526064015b60405180910390fd5b8115610531576001600160a01b0383166000908152600a60205260409020805460ff191660011790555b600061053c8461104e565b905080831515856001600160a01b03167faf6c2390a663769e4de25310db84f4aea451504c7935fd4318516af0f74ed93e60405160405180910390a49392505050565b60006301ffc9a760e01b6001600160e01b0319831614806105b057506380ac58cd60e01b6001600160e01b03198316145b806105cb5750635b5e139f60e01b6001600160e01b03198316145b92915050565b600180546105de90611928565b80601f016020809104026020016040519081016040528092919081815260200182805461060a90611928565b80156106575780601f1061062c57610100808354040283529160200191610657565b820191906000526020600020905b81548152906001019060200180831161063a57829003601f168201915b505050505081565b6000828152600960209081526040808320546001600160401b03168352600882528083208584529091529081902090516060919061069e908490611978565b908152602001604051809103902080546106b790611928565b80601f01602080910402602001604051908101604052809291908181526020018280546106e390611928565b80156107305780601f1061070557610100808354040283529160200191610730565b820191906000526020600020905b81548152906001019060200180831161071357829003601f168201915b5050505050905092915050565b806107478161113e565b61078b5760405162461bcd60e51b8152602060048201526015602482015274135155105110551057d5539055551213d49254d151605a1b60448201526064016104fe565b610794826111a3565b5050565b80336001600160a01b03821614806107d357506001600160a01b038116600090815260056020908152604080832033845290915290205460ff165b6108105760405162461bcd60e51b815260206004820152600e60248201526d1393d517d055551213d49256915160921b60448201526064016104fe565b60008281526004602052604080822080546001600160a01b0319166001600160a01b0387811691821790925591518593918516917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591a4505050565b60008061087883610b5d565b116108b65760405162461bcd60e51b815260206004820152600e60248201526d2727aa2fa9a7aaa62fa7aba722a960911b60448201526064016104fe565b506001600160a01b03166000908152600a602052604090205460ff1690565b336000908152600c602052604090205460ff166109225760405162461bcd60e51b815260206004820152600b60248201526a27a7262cafa6a4a72a22a960a91b60448201526064016104fe565b6001600160a01b0382166000818152600a6020526040808220805460ff191685151590811790915590519092917f99c750b1450e39ccc45628269731595657e36f04ec239948712acb33ad4dade891a35050565b60405162461bcd60e51b81526020600482015260146024820152731514905394d1915497d393d517d0531313d5d15160621b60448201526064016104fe565b826109bf8161113e565b610a035760405162461bcd60e51b8152602060048201526015602482015274135155105110551057d5539055551213d49254d151605a1b60448201526064016104fe565b60005b82811015610af5576000848483818110610a2257610a22611994565b9050602002810190610a3491906119aa565b610a3d906119c0565b6020808201516000898152600783526040808220546001600160401b03168252600684528082208b83529093528290208351925193945090929091610a8191611978565b90815260200160405180910390209080519060200190610aa29291906113b5565b508051602082015160405188927f601d4b2f0f06545c0f60d4f70e3bc5d78db246f7b66aaeb1ea23a56aa854c67092610ada92611a45565b60405180910390a25080610aed81611a89565b915050610a06565b5050505050565b600081600003610b1e5760405162461bcd60e51b81526004016104fe90611aa2565b506001600160a01b038116600090815260036020526040902054819080610b575760405162461bcd60e51b81526004016104fe90611aa2565b50919050565b60006001600160a01b038216610ba45760405162461bcd60e51b815260206004820152600c60248201526b5a45524f5f4144445245535360a01b60448201526064016104fe565b506001600160a01b031660009081526003602052604090205490565b610bc8611233565b610bd2600061128d565b565b80610bee336000908152600c602052604090205460ff1690565b610c3a5760405162461bcd60e51b815260206004820152601b60248201527f47415445445f4d455441444154415f554e415554484f5249534544000000000060448201526064016104fe565b610794826112dd565b600280546105de90611928565b3360008181526005602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b82610cd6336000908152600c602052604090205460ff1690565b610d225760405162461bcd60e51b815260206004820152601b60248201527f47415445445f4d455441444154415f554e415554484f5249534544000000000060448201526064016104fe565b60005b82811015610af5576000848483818110610d4157610d41611994565b9050602002810190610d5391906119aa565b610d5c906119c0565b6020808201516000898152600983526040808220546001600160401b03168252600884528082208b83529093528290208351925193945090929091610da091611978565b90815260200160405180910390209080519060200190610dc19291906113b5565b508051602082015160405188927f29d4cd326b134d55e630ceb2871cea5e243b89bc9667e0c840b5da53b26ffd6a92610df992611a45565b60405180910390a25080610e0c81611a89565b915050610d25565b6001600160a01b03811660009081526003602052604081205460609103610e4d5760405162461bcd60e51b81526004016104fe90611aa2565b600b610e5883611366565b604051602001610e69929190611ac6565b6040516020818303038152906040529050919050565b6000838152600760209081526040808320546001600160401b031683526006825280832086845290915290819020905160609190610ec09085908590611b63565b90815260200160405180910390208054610ed990611928565b80601f0160208091040260200160405190810160405280929190818152602001828054610f0590611928565b8015610f525780601f10610f2757610100808354040283529160200191610f52565b820191906000526020600020905b815481529060010190602001808311610f3557829003601f168201915b505050505090509392505050565b610f68611233565b6001600160a01b0382166000818152600c6020526040808220805460ff191685151590811790915590519092917f1f96bc657d385fd83da973a43f2ad969e6d96b6779b779571a7306db7ca1cd0091a35050565b610fc4611233565b610fd0600b8383611439565b505050565b610fdd611233565b6001600160a01b0381166110425760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016104fe565b61104b8161128d565b50565b60006001600160a01b03821661109a5760405162461bcd60e51b81526020600482015260116024820152701253959053125117d49150d25412515395607a1b60448201526064016104fe565b6001600160a01b038216600090815260036020526040902054156110f15760405162461bcd60e51b815260206004820152600e60248201526d1053149150511657d3525395115160921b60448201526064016104fe565b6001600160a01b0382166000818152600360205260408082206001905551829182917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a492915050565b600081336001600160a01b038216148061117b57506001600160a01b038116600090815260056020908152604080832033845290915290205460ff165b8061119c57506000838152600460205260409020546001600160a01b031633145b9392505050565b600081815260076020526040812080546001600160401b0316916111c683611b73565b82546101009290920a6001600160401b038181021990931691831602179091556000838152600760209081526040918290205491519190921681528392507f3773c27b7f05829d86b67403e26562fb9d776452b918d74b238bfdc1203bf0ed91015b60405180910390a250565b6000546001600160a01b03163314610bd25760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016104fe565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600081815260096020526040812080546001600160401b03169161130083611b73565b82546101009290920a6001600160401b038181021990931691831602179091556000838152600960209081526040918290205491519190921681528392507fc87757beabcc5d61e477f4ffafb24461a0eb17e06d5bbf82354b4df70f3580c39101611228565b604080516080810191829052607f0190826030600a8206018353600a90045b80156113a357600183039250600a81066030018353600a9004611385565b50819003601f19909101908152919050565b8280546113c190611928565b90600052602060002090601f0160209004810192826113e35760008555611429565b82601f106113fc57805160ff1916838001178555611429565b82800160010185558215611429579182015b8281111561142957825182559160200191906001019061140e565b506114359291506114ad565b5090565b82805461144590611928565b90600052602060002090601f0160209004810192826114675760008555611429565b82601f106114805782800160ff19823516178555611429565b82800160010185558215611429579182015b82811115611429578235825591602001919060010190611492565b5b8082111561143557600081556001016114ae565b80356001600160a01b03811681146114d957600080fd5b919050565b600080604083850312156114f157600080fd5b6114fa836114c2565b91506020830135801515811461150f57600080fd5b809150509250929050565b60006020828403121561152c57600080fd5b81356001600160e01b03198116811461119c57600080fd5b60005b8381101561155f578181015183820152602001611547565b8381111561156e576000848401525b50505050565b6000815180845261158c816020860160208601611544565b601f01601f19169290920160200192915050565b60208152600061119c6020830184611574565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126115da57600080fd5b81356001600160401b03808211156115f4576115f46115b3565b604051601f8301601f19908116603f0116810190828211818310171561161c5761161c6115b3565b8160405283815286602085880101111561163557600080fd5b836020870160208301376000602085830101528094505050505092915050565b6000806040838503121561166857600080fd5b8235915060208301356001600160401b0381111561168557600080fd5b611691858286016115c9565b9150509250929050565b6000602082840312156116ad57600080fd5b5035919050565b600080604083850312156116c757600080fd5b6116d0836114c2565b946020939093013593505050565b6000602082840312156116f057600080fd5b61119c826114c2565b60008060006060848603121561170e57600080fd5b611717846114c2565b9250611725602085016114c2565b9150604084013590509250925092565b60008060006040848603121561174a57600080fd5b8335925060208401356001600160401b038082111561176857600080fd5b818601915086601f83011261177c57600080fd5b81358181111561178b57600080fd5b8760208260051b85010111156117a057600080fd5b6020830194508093505050509250925092565b60008083601f8401126117c557600080fd5b5081356001600160401b038111156117dc57600080fd5b6020830191508360208285010111156117f457600080fd5b9250929050565b60008060008060006080868803121561181357600080fd5b61181c866114c2565b945061182a602087016114c2565b93506040860135925060608601356001600160401b0381111561184c57600080fd5b611858888289016117b3565b969995985093965092949392505050565b60008060006040848603121561187e57600080fd5b8335925060208401356001600160401b0381111561189b57600080fd5b6118a7868287016117b3565b9497909650939450505050565b600080602083850312156118c757600080fd5b82356001600160401b038111156118dd57600080fd5b6118e9858286016117b3565b90969095509350505050565b6000806040838503121561190857600080fd5b611911836114c2565b915061191f602084016114c2565b90509250929050565b600181811c9082168061193c57607f821691505b602082108103610b5757634e487b7160e01b600052602260045260246000fd5b6000815161196e818560208601611544565b9290920192915050565b6000825161198a818460208701611544565b9190910192915050565b634e487b7160e01b600052603260045260246000fd5b60008235603e1983360301811261198a57600080fd5b6000604082360312156119d257600080fd5b604051604081016001600160401b0382821081831117156119f5576119f56115b3565b816040528435915080821115611a0a57600080fd5b611a16368387016115c9565b83526020850135915080821115611a2c57600080fd5b50611a39368286016115c9565b60208301525092915050565b604081526000611a586040830185611574565b8281036020840152611a6a8185611574565b95945050505050565b634e487b7160e01b600052601160045260246000fd5b600060018201611a9b57611a9b611a73565b5060010190565b6020808252600a90820152691393d517d3525395115160b21b604082015260600190565b600080845481600182811c915080831680611ae257607f831692505b60208084108203611b0157634e487b7160e01b86526022600452602486fd5b818015611b155760018114611b2657611b53565b60ff19861689528489019650611b53565b60008b81526020902060005b86811015611b4b5781548b820152908501908301611b32565b505084890196505b505050505050611a6a818561195c565b8183823760009101908152919050565b60006001600160401b03808316818103611b8f57611b8f611a73565b600101939250505056fea26469706673582212209fbc14e24938f2c1be37f99512bfdf0155966b056227be95d4e85a1025be796e64736f6c634300080e00330000000000000000000000007884f7f04f994da14302a16cf15e597e31eebecf000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000094379626572536f756c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004534f554c00000000000000000000000000000000000000000000000000000000",
            SALT
        );

        require(
            soul == 0x14A725839184F879f3C09cE3d707e5a3E4C5869d,
            "SOUL_ADDRESS_MISMATCH"
        );
        _write(vm, "Soul", soul);

        address ecdsaValidator = dc.deploy(
            hex"608060405234801561001057600080fd5b50610899806100206000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c80630c9595561461005c57806320709efc14610071578063333daf92146100b75780633a871cdd146100d85780638fc925aa146100eb575b600080fd5b61006f61006a36600461069c565b61011a565b005b61009a61007f3660046106de565b6000602081905290815260409020546001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6100ca6100c5366004610707565b61019a565b6040519081526020016100ae565b6100ca6100e6366004610753565b610297565b61006f6100f936600461069c565b505033600090815260208190526040902080546001600160a01b0319169055565b600061012960148284866107a7565b610132916107d1565b3360008181526020819052604080822080546001600160a01b0319811660609690961c95861790915590519394506001600160a01b0316928492849290917f381c0d11398486654573703c51ee8210ce9461764d133f9f0e53b6a5397053319190a450505050565b33600090815260208181526040808320548151601f86018490048402810184019092528482526001600160a01b0316916101f0918791879087908190840183828082843760009201919091525061038892505050565b6001600160a01b0316816001600160a01b031603610212576000915050610290565b600061021d866103ac565b905060006102618287878080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061038892505050565b9050806001600160a01b0316836001600160a01b0316146102885760019350505050610290565b600093505050505b9392505050565b60008080806102a960208801886106de565b6001600160a01b039081168252602082019290925260400160002054169050610314846102da610140880188610806565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061038892505050565b6001600160a01b0316816001600160a01b031603610336576000915050610290565b6000610341856103ac565b90506000610357826102da6101408a018a610806565b9050806001600160a01b0316836001600160a01b03161461037e5760019350505050610290565b5050509392505050565b600080600061039785856103ff565b915091506103a481610444565b509392505050565b6040517f19457468657265756d205369676e6564204d6573736167653a0a3332000000006020820152603c8101829052600090605c01604051602081830303815290604052805190602001209050919050565b60008082516041036104355760208301516040840151606085015160001a61042987828585610596565b9450945050505061043d565b506000905060025b9250929050565b60008160048111156104585761045861084d565b036104605750565b60018160048111156104745761047461084d565b036104c65760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e6174757265000000000000000060448201526064015b60405180910390fd5b60028160048111156104da576104da61084d565b036105275760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e6774680060448201526064016104bd565b600381600481111561053b5761053b61084d565b036105935760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b60648201526084016104bd565b50565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08311156105cd5750600090506003610651565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015610621573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b03811661064a57600060019250925050610651565b9150600090505b94509492505050565b60008083601f84011261066c57600080fd5b50813567ffffffffffffffff81111561068457600080fd5b60208301915083602082850101111561043d57600080fd5b600080602083850312156106af57600080fd5b823567ffffffffffffffff8111156106c657600080fd5b6106d28582860161065a565b90969095509350505050565b6000602082840312156106f057600080fd5b81356001600160a01b038116811461029057600080fd5b60008060006040848603121561071c57600080fd5b83359250602084013567ffffffffffffffff81111561073a57600080fd5b6107468682870161065a565b9497909650939450505050565b60008060006060848603121561076857600080fd5b833567ffffffffffffffff81111561077f57600080fd5b8401610160818703121561079257600080fd5b95602085013595506040909401359392505050565b600080858511156107b757600080fd5b838611156107c457600080fd5b5050820193919092039150565b6bffffffffffffffffffffffff1981358181169160148510156107fe5780818660140360031b1b83161692505b505092915050565b6000808335601e1984360301811261081d57600080fd5b83018035915067ffffffffffffffff82111561083857600080fd5b60200191503681900382131561043d57600080fd5b634e487b7160e01b600052602160045260246000fdfea264697066735822122020afaf000a5c9712d29ed928299bac50679181ddbc7fd8775fb87d9c9d3835f164736f6c634300080e0033",
            SALT
        );

        require(
            ecdsaValidator == 0x417f5a41305DDc99D18B5E176521b468b2a31B86,
            "VALIDATOR_ADDRESS_MISMATCH"
        );

        _write(vm, "ECDSAValidator", ecdsaValidator);
        address factory = dc.deploy(
            hex"6101006040523480156200001257600080fd5b506040516200551338038062005513833981016040819052620000359162000179565b6200004033620000f4565b826040516200004f9062000144565b6001600160a01b039091168152602001604051809103906000f0801580156200007c573d6000803e3d6000fd5b506001600160a01b03166080526040518390620000999062000152565b6001600160a01b039091168152602001604051809103906000f080158015620000c6573d6000803e3d6000fd5b506001600160a01b0390811660a05283811660c052821660e052620000eb81620000f4565b505050620001cd565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b611b4080620011ad83390190565b6128268062002ced83390190565b6001600160a01b03811681146200017657600080fd5b50565b6000806000606084860312156200018f57600080fd5b83516200019c8162000160565b6020850151909350620001af8162000160565b6040850151909250620001c28162000160565b809150509250925092565b60805160a05160c05160e051610f616200024c600039600081816101d1015261061f015260008181610227015281816102b801528181610706015261077d015260008181610183015281816103a6015281816104e4015261055c01526000818160ce01528181610384015281816104c2015261053a0152610f616000f3fe608060405260043610620000b55760003560e01c8063815b7a8c116200006c578063815b7a8c14620001bd5780638da5cb5b14620001f3578063b0d691fe1462000213578063bb9fe6bf1462000249578063bed9d8611462000261578063f2fde38b146200027957600080fd5b8063037637aa14620000ba5780630396cb60146200010c5780631bb12e691462000125578063296601cd146200014a5780636c2f70fd146200016f578063715018a614620001a5575b600080fd5b348015620000c757600080fd5b50620000f07f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b03909116815260200160405180910390f35b620001236200011d3660046200097c565b6200029e565b005b3480156200013257600080fd5b50620000f062000144366004620009ba565b62000323565b3480156200015757600080fd5b50620000f062000169366004620009ba565b6200045f565b3480156200017c57600080fd5b50620000f07f000000000000000000000000000000000000000000000000000000000000000081565b348015620001b257600080fd5b5062000123620006ec565b348015620001ca57600080fd5b50620000f07f000000000000000000000000000000000000000000000000000000000000000081565b3480156200020057600080fd5b506000546001600160a01b0316620000f0565b3480156200022057600080fd5b50620000f07f000000000000000000000000000000000000000000000000000000000000000081565b3480156200025657600080fd5b506200012362000704565b3480156200026e57600080fd5b50620001236200077b565b3480156200028657600080fd5b50620001236200029836600462000a4c565b620007ff565b604051621cb65b60e51b815263ffffffff821660048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690630396cb609034906024016000604051808303818588803b1580156200030657600080fd5b505af11580156200031b573d6000803e3d6000fd5b505050505050565b600080858585856040516020016200033f949392919062000a6c565b6040516020818303038152906040528051906020012090506200045381604051806020016200036e906200096e565b6020820181038252601f19601f820116604052507f0000000000000000000000000000000000000000000000000000000000000000897f00000000000000000000000000000000000000000000000000000000000000008a8a604051602401620003dc949392919062000ac2565b60408051601f19818403018152918152602080830180516001600160e01b031663cf7a1d7760e01b1790529051620004179392910162000b2a565b60408051601f198184030181529082905262000437929160200162000b6e565b6040516020818303038152906040528051906020012062000882565b9150505b949350505050565b600080858585856040516020016200047b949392919062000a6c565b60405160208183030381529060405280519060200120905060006200051a8260405180602001620004ac906200096e565b6020820181038252601f19601f820116604052507f00000000000000000000000000000000000000000000000000000000000000008a7f00000000000000000000000000000000000000000000000000000000000000008b8b604051602401620003dc949392919062000ac2565b90506001600160a01b0381163b1562000537579150620004579050565b817f0000000000000000000000000000000000000000000000000000000000000000887f0000000000000000000000000000000000000000000000000000000000000000898960405160240162000592949392919062000ac2565b60408051601f198184030181529181526020820180516001600160e01b031663cf7a1d7760e01b17905251620005c8906200096e565b620005d592919062000b2a565b8190604051809103906000f5905080158015620005f6573d6000803e3d6000fd5b5060405162effe8160e01b81526001600160a01b038083166004830152600060248301529194507f00000000000000000000000000000000000000000000000000000000000000009091169062effe81906044016020604051808303816000875af11580156200066a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000690919062000ba1565b50866001600160a01b0316836001600160a01b03167fa4ec333d142e947b3345528c6cbc210be703d984f8df2c3d589f2b3ea39f7437888888604051620006da9392919062000bbb565b60405180910390a35050949350505050565b620006f662000898565b620007026000620008f4565b565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663bb9fe6bf6040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156200076057600080fd5b505af115801562000775573d6000803e3d6000fd5b50505050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663c23a5cea620007bd6000546001600160a01b031690565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401600060405180830381600087803b1580156200076057600080fd5b6200080962000898565b6001600160a01b038116620008745760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084015b60405180910390fd5b6200087f81620008f4565b50565b60006200089183833062000944565b9392505050565b6000546001600160a01b03163314620007025760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016200086b565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000604051836040820152846020820152828152600b8101905060ff815360559020949350505050565b61034a8062000be283390190565b6000602082840312156200098f57600080fd5b813563ffffffff811681146200089157600080fd5b6001600160a01b03811681146200087f57600080fd5b60008060008060608587031215620009d157600080fd5b8435620009de81620009a4565b9350602085013567ffffffffffffffff80821115620009fc57600080fd5b818701915087601f83011262000a1157600080fd5b81358181111562000a2157600080fd5b88602082850101111562000a3457600080fd5b95986020929092019750949560400135945092505050565b60006020828403121562000a5f57600080fd5b81356200089181620009a4565b6bffffffffffffffffffffffff198560601b16815282846014830137601492019182015260340192915050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b6001600160a01b0385811682528416602082015260606040820181905260009062000af1908301848662000a99565b9695505050505050565b60005b8381101562000b1857818101518382015260200162000afe565b83811115620007755750506000910152565b60018060a01b0383168152604060208201526000825180604084015262000b5981606085016020870162000afb565b601f01601f1916919091016060019392505050565b6000835162000b8281846020880162000afb565b83519083019062000b9881836020880162000afb565b01949350505050565b60006020828403121562000bb457600080fd5b5051919050565b60408152600062000bd160408301858762000a99565b905082602083015294935050505056fe608060405260405161034a38038061034a833981016040819052610022916101ca565b6001600160a01b0382166100965760405162461bcd60e51b815260206004820152603060248201527f4549503139363750726f78793a20696d706c656d656e746174696f6e2069732060448201526f746865207a65726f206164647265737360801b60648201526084015b60405180910390fd5b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc82815581511561017c576000836001600160a01b0316836040516100db9190610298565b600060405180830381855af49150503d8060008114610116576040519150601f19603f3d011682016040523d82523d6000602084013e61011b565b606091505b505090508061017a5760405162461bcd60e51b815260206004820152602560248201527f4549503139363750726f78793a20636f6e7374727563746f722063616c6c2066604482015264185a5b195960da1b606482015260840161008d565b505b5050506102b4565b634e487b7160e01b600052604160045260246000fd5b60005b838110156101b557818101518382015260200161019d565b838111156101c4576000848401525b50505050565b600080604083850312156101dd57600080fd5b82516001600160a01b03811681146101f457600080fd5b60208401519092506001600160401b038082111561021157600080fd5b818501915085601f83011261022557600080fd5b81518181111561023757610237610184565b604051601f8201601f19908116603f0116810190838211818310171561025f5761025f610184565b8160405282815288602084870101111561027857600080fd5b61028983602083016020880161019a565b80955050505050509250929050565b600082516102aa81846020870161019a565b9190910192915050565b6088806102c26000396000f3fe60806040526000602d7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5490565b90503660008037600080366000845af43d6000803e808015604d573d6000f35b3d6000fdfea2646970667358221220f2239e345a4d03f495719bd5d13f603839ac7a04ce61c9938029e0909f0ff48964736f6c634300080e0033a2646970667358221220b5882bab30ac57b3d38688f7ee46f6c8ce569c388746feec7d3fc39ab774554664736f6c634300080e003361016060405234801561001157600080fd5b50604051611b40380380611b4083398101604081905261003091610130565b604080518082018252600681526512d95c9b995b60d21b602080830191825283518085019094526005845264181718171960d91b908401528151902060e08190527fb30367effb941b728181f67f3bd24a38a4fff408ee7fb3b074425c9fb5e9be746101008190524660a0529192917f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f61010f8184846040805160208101859052908101839052606081018290524660808201523060a082015260009060c0016040516020818303038152906040528051906020012090509392505050565b6080523060c05261012052505050506001600160a01b031661014052610160565b60006020828403121561014257600080fd5b81516001600160a01b038116811461015957600080fd5b9392505050565b60805160a05160c05160e05161010051610120516101405161197f6101c1600039600081816102df01526104a40152600061107b015260006110ca015260006110a501526000610ffe0152600061102801526000611052015261197f6000f3fe6080604052600436106100745760003560e01c80634be5cd9f1161004e5780634be5cd9f1461027957806354fd4d501461029c578063b0d691fe146102cd578063cf7a1d77146103195761007b565b806306fdde03146101ca5780631626ba7e146102125780633a871cdd1461024b5761007b565b3661007b57005b3080546001600160a01b03167f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc81815560006100b5610339565b6001015460405163064acaab60e11b8152600160501b9091046001600160a01b031691508190630c959556906100f29060028801906004016111eb565b600060405180830381600087803b15801561010c57600080fd5b505af1158015610120573d6000803e3d6000fd5b50505050600061012d3090565b600101546001600160a01b0316905080156101a45760405163064acaab60e11b81526001600160a01b03821690630c959556906101719060033001906004016111eb565b600060405180830381600087803b15801561018b57600080fd5b505af115801561019f573d6000803e3d6000fd5b505050505b3660008037600080366000875af43d6000803e8080156101c3573d6000f35b3d6000fd5b005b3480156101d657600080fd5b506101fc6040518060400160405280600681526020016512d95c9b995b60d21b81525081565b60405161020991906112df565b60405180910390f35b34801561021e57600080fd5b5061023261022d366004611334565b61036d565b6040516001600160e01b03199091168152602001610209565b34801561025757600080fd5b5061026b610266366004611380565b610497565b604051908152602001610209565b34801561028557600080fd5b5061028e6107ec565b6040516102099291906113d4565b3480156102a857600080fd5b506101fc60405180604001604052806005815260200164181718171960d91b81525081565b3480156102d957600080fd5b506103017f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610209565b34801561032557600080fd5b506101c8610334366004611428565b610895565b60008061036760017f439ffe7df606b78489639bc0b827913bd09e1246fa6802968a5b3694c53e0dd96114a3565b92915050565b6000806103e661037b610339565b600101600a9054906101000a90046001600160a01b031663333daf9260e01b8787876040516024016103af939291906114e3565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152610a01565b9150506000818060200190518101906103ff9190611506565b9050600061040c82610a55565b905042816020015165ffffffffffff16111561043657506001600160e01b03199250610490915050565b42816040015165ffffffffffff16101561045e57506001600160e01b03199250610490915050565b80516001600160a01b03161561048257506001600160e01b03199250610490915050565b50630b135d3f60e11b925050505b9392505050565b6000336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146105165760405162461bcd60e51b815260206004820152601c60248201527f6163636f756e743a206e6f742066726f6d20656e747279506f696e740000000060448201526064015b60405180910390fd5b600061052661014086018661151f565b61053591600491600091611566565b61053e91611590565b9050600061054b8661168d565b905060008061055d606089018961151f565b61056c91600491600091611566565b61057591611590565b90506001600160e01b0319841660000361060d576105928861168d565b92506105a261014089018961151f565b6105b0916004908290611566565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152505050506101408401526105f2610339565b60010154600160501b90046001600160a01b0316915061074a565b6001600160e01b03198416600160e11b0361073d5761063061014089018961151f565b61063f91602491601091611566565b6106489161179c565b60601c91503660008181610669856106646101408f018f61151f565b610ac6565b604051949d509297509095509350915060009061069b90889063064acaab60e11b906103af90899089906024016117cf565b509050806106f65760405162461bcd60e51b815260206004820152602260248201527f6163636f756e743a20656e61626c65206d6f646520656e61626c65206661696c604482015261195960f21b606482015260840161050d565b82828080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152505050506101408901525061074a9350505050565b6001945050505050610490565b851561079c57604051600090339088908381818185875af1925050503d8060008114610792576040519150601f19603f3d011682016040523d82523d6000602084013e610797565b606091505b505050505b60006107bf83633a871cdd60e01b868b8b6040516024016103af939291906117e3565b9150506107df86828060200190518101906107da9190611506565b610ed0565b9998505050505050505050565b3080546002820180546001600160a01b0390921692606092909190610810906111b1565b80601f016020809104026020016040519081016040528092919081815260200182805461083c906111b1565b80156108895780601f1061085e57610100808354040283529160200191610889565b820191906000526020600020905b81548152906001019060200180831161086c57829003601f168201915b50505050509150509091565b600061089f610339565b6001810154909150600160501b90046001600160a01b0316156109045760405162461bcd60e51b815260206004820152601c60248201527f6163636f756e743a20616c726561647920696e697469616c697a656400000000604482015260640161050d565b6001810180547fffff0000000000000000000000000000000000000000ffffffffffffffffffff16600160501b6001600160a01b03881602179055833080546001600160a01b0319166001600160a01b03929092169190911790558282306002019190610972929190611118565b50600061099486630c95955660e01b86866040516024016103af9291906117cf565b509050806109f95760405162461bcd60e51b815260206004820152602c60248201527f6163636f756e743a20656e61626c65206661696c65642077697468206465666160448201526b3ab63a3b30b634b230ba37b960a11b606482015260840161050d565b505050505050565b600060606000808451602086016000885af260405160203d0181016040523d81523d6000602083013e909250905081610a4e578060405162461bcd60e51b815260040161050d91906112df565b9250929050565b60408051606081018252600080825260208201819052918101919091528160a081901c65ffffffffffff8116600003610a91575065ffffffffffff5b604080516060810182526001600160a01b03909316835260d09490941c602083015265ffffffffffff16928101929092525090565b60003681818180610adb60586038898b611566565b610ae4916118d5565b905087605888610af484836118f3565b92610b0193929190611566565b909550935060008888610b158460586118f3565b90610b218560786118f3565b92610b2e93929190611566565b610b37916118d5565b60001c90506000610c187f3ce406685c1b3551d706d85a68afdaa49ac4e07b451ad9b8ff8b58c3ee9641768c8c8c600490602492610b7793929190611566565b610b80916118d5565b60001c8d8d602490603892610b9793929190611566565b610ba09161179c565b60601c8b8b604051610bb392919061190b565b604051908190038120610bfd95949392916020019485526001600160e01b031993909316602085015260408401919091526001600160a01b03166060830152608082015260a00190565b60405160208183030381529060405280519060200120610fa3565b90506000610c87610c27610339565b60010154600160501b90046001600160a01b031663199ed7c960e11b848e8e610c518a60786118f3565b9089610c5e8c60786118f3565b610c6891906118f3565b92610c7593929190611566565b6040516024016103af939291906114e3565b915050610cd781806020019051810190610ca19190611506565b60a06bffffffffffffffffffffffff8016901b8d8d600490602492610cc893929190611566565b610cd1916118d5565b16610ed0565b98508a8a84610ce78760786118f3565b610cf191906118f3565b610cfc928290611566565b9550955060405180608001604052808c8c600490600a92610d1f93929190611566565b610d289161191b565b60d01c65ffffffffffff1681526020018c8c600a90601092610d4c93929190611566565b610d559161191b565b60d01c65ffffffffffff1681526020018c8c602490603892610d7993929190611566565b610d829161179c565b60601c6001600160a01b031681526020018c8c601090602492610da793929190611566565b610db09161179c565b60601c9052610dbd610339565b6001600160e01b03198e166000908152600291909101602090815260409182902083518154928501519385015165ffffffffffff9182166bffffffffffffffffffffffff199094169390931766010000000000009190941602929092176bffffffffffffffffffffffff16600160601b6001600160a01b0392831602178255606090920151600190910180546001600160a01b03191691909216179055610e68602460108c8e611566565b610e719161179c565b60013090810180546001600160a01b03191660609390931c92909217909155610e9e906003018989611118565b50888b60588c610eae88836118f3565b92610ebb93929190611566565b98509850985050505050939792965093509350565b6000816001600160a01b0316836001600160a01b031614610ef357506001610367565b60d083901c60a084901c65ffffffffffff8116600003610f16575065ffffffffffff5b60d084901c60a085901c65ffffffffffff8116600003610f39575065ffffffffffff5b8165ffffffffffff168465ffffffffffff161015610f55578193505b8065ffffffffffff168365ffffffffffff161115610f71578092505b60d08465ffffffffffff16901b60a08465ffffffffffff16901b886001600160a01b0316171794505050505092915050565b6000610367610fb0610ff1565b8360405161190160f01b6020820152602281018390526042810182905260009060620160405160208183030381529060405280519060200120905092915050565b6000306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614801561104a57507f000000000000000000000000000000000000000000000000000000000000000046145b1561107457507f000000000000000000000000000000000000000000000000000000000000000090565b50604080517f00000000000000000000000000000000000000000000000000000000000000006020808301919091527f0000000000000000000000000000000000000000000000000000000000000000828401527f000000000000000000000000000000000000000000000000000000000000000060608301524660808301523060a0808401919091528351808403909101815260c0909201909252805191012090565b828054611124906111b1565b90600052602060002090601f016020900481019282611146576000855561118c565b82601f1061115f5782800160ff1982351617855561118c565b8280016001018555821561118c579182015b8281111561118c578235825591602001919060010190611171565b5061119892915061119c565b5090565b5b80821115611198576000815560010161119d565b600181811c908216806111c557607f821691505b6020821081036111e557634e487b7160e01b600052602260045260246000fd5b50919050565b600060208083526000845481600182811c91508083168061120d57607f831692505b858310810361122a57634e487b7160e01b85526022600452602485fd5b878601838152602001818015611247576001811461125857611283565b60ff19861682528782019650611283565b60008b81526020902060005b8681101561127d57815484820152908501908901611264565b83019750505b50949998505050505050505050565b6000815180845260005b818110156112b85760208185018101518683018201520161129c565b818111156112ca576000602083870101525b50601f01601f19169290920160200192915050565b6020815260006104906020830184611292565b60008083601f84011261130457600080fd5b50813567ffffffffffffffff81111561131c57600080fd5b602083019150836020828501011115610a4e57600080fd5b60008060006040848603121561134957600080fd5b83359250602084013567ffffffffffffffff81111561136757600080fd5b611373868287016112f2565b9497909650939450505050565b60008060006060848603121561139557600080fd5b833567ffffffffffffffff8111156113ac57600080fd5b840161016081870312156113bf57600080fd5b95602085013595506040909401359392505050565b6001600160a01b03831681526040602082018190526000906113f890830184611292565b949350505050565b6001600160a01b038116811461141557600080fd5b50565b803561142381611400565b919050565b6000806000806060858703121561143e57600080fd5b843561144981611400565b9350602085013561145981611400565b9250604085013567ffffffffffffffff81111561147557600080fd5b611481878288016112f2565b95989497509550505050565b634e487b7160e01b600052601160045260246000fd5b6000828210156114b5576114b561148d565b500390565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b8381526040602082015260006114fd6040830184866114ba565b95945050505050565b60006020828403121561151857600080fd5b5051919050565b6000808335601e1984360301811261153657600080fd5b83018035915067ffffffffffffffff82111561155157600080fd5b602001915036819003821315610a4e57600080fd5b6000808585111561157657600080fd5b8386111561158357600080fd5b5050820193919092039150565b6001600160e01b031981358181169160048510156115b85780818660040360031b1b83161692505b505092915050565b634e487b7160e01b600052604160045260246000fd5b604051610160810167ffffffffffffffff811182821017156115fa576115fa6115c0565b60405290565b600082601f83011261161157600080fd5b813567ffffffffffffffff8082111561162c5761162c6115c0565b604051601f8301601f19908116603f01168101908282118183101715611654576116546115c0565b8160405283815286602085880101111561166d57600080fd5b836020870160208301376000602085830101528094505050505092915050565b600061016082360312156116a057600080fd5b6116a86115d6565b6116b183611418565b815260208301356020820152604083013567ffffffffffffffff808211156116d857600080fd5b6116e436838701611600565b604084015260608501359150808211156116fd57600080fd5b61170936838701611600565b60608401526080850135608084015260a085013560a084015260c085013560c084015260e085013560e0840152610100915081850135828401526101209150818501358181111561175957600080fd5b61176536828801611600565b83850152506101409150818501358181111561178057600080fd5b61178c36828801611600565b8385015250505080915050919050565b6bffffffffffffffffffffffff1981358181169160148510156115b85760149490940360031b84901b1690921692915050565b6020815260006113f86020830184866114ba565b606081526117fd6060820185516001600160a01b03169052565b60208401516080820152600060408501516101608060a08501526118256101c0850183611292565b91506060870151605f19808685030160c08701526118438483611292565b9350608089015160e087015260a08901519150610100828188015260c08a01519250610120838189015260e08b0151935061014084818a0152828c0151868a0152818c0151955083898803016101808a015261189f8787611292565b9650808c0151955050505080868503016101a087015250506118c18282611292565b602085019690965250505060400152919050565b8035602083101561036757600019602084900360031b1b1692915050565b600082198211156119065761190661148d565b500190565b8183823760009101908152919050565b6001600160d01b031981358181169160068510156115b85760069490940360031b84901b169092169291505056fea264697066735822122058b422c835c30dd117cfcd2808201b3c17b69bb7b5fe44673e8f3997ca8feca464736f6c634300080e00336101606040523480156200001257600080fd5b50604051620028263803806200282683398101604081905262000035916200018e565b604080518082018252600681526512d95c9b995b60d21b6020808301918252835180850185526005815264181718171960d91b908201529151902060e08190527fb30367effb941b728181f67f3bd24a38a4fff408ee7fb3b074425c9fb5e9be746101008190524660a081815285517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f818701819052818801959095526060810193909352608080840192909252308382018190528651808503909201825260c09384019096528051940193909320909252919052610120526001600160a01b038116610140528060016200012962000158565b600101600a6101000a8154816001600160a01b0302191690836001600160a01b031602179055505050620001e6565b6000806200018860017f439ffe7df606b78489639bc0b827913bd09e1246fa6802968a5b3694c53e0dd9620001c0565b92915050565b600060208284031215620001a157600080fd5b81516001600160a01b0381168114620001b957600080fd5b9392505050565b600082821015620001e157634e487b7160e01b600052601160045260246000fd5b500390565b60805160a05160c05160e0516101005161012051610140516125a66200028060003960008181610135015281816104af015281816106ff015281816108d30152818161098301528181610e5a01528181610f72015281816110ae0152818161123201526113a901526000611a7d01526000611acc01526000611aa701526000611a0001526000611a2a01526000611a5401526125a66000f3fe6080604052600436106101235760003560e01c806354fd4d50116100a0578063bc197c8111610064578063bc197c81146104d1578063d087d28814610500578063d1f5789414610515578063d541622114610535578063f23a6e61146105555761012a565b806354fd4d501461040b57806355b14f501461043c57806357b750471461045c57806388e7fd0614610471578063b0d691fe1461049d5761012a565b80633659cfe6116100e75780633659cfe6146103105780633a871cdd146103305780633e1b08121461035e57806351166ba01461037e57806351945447146103eb5761012a565b806306fdde03146102165780630b3dc3541461025e578063150b7a021461028b5780631626ba7e146102d057806329f8b174146102f05761012a565b3661012a57005b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146101a75760405162461bcd60e51b815260206004820152601c60248201527f6163636f756e743a206e6f742066726f6d20656e747279706f696e740000000060448201526064015b60405180910390fd5b600080356001600160e01b031916905060006101c1610582565b6001600160e01b0319831660009081526002919091016020526040812054600160601b90046001600160a01b0316915036908037600080366000845af43d6000803e80801561020f573d6000f35b3d6000fd5b005b34801561022257600080fd5b506102486040518060400160405280600681526020016512d95c9b995b60d21b81525081565b6040516102559190611b67565b60405180910390f35b34801561026a57600080fd5b506102736105b6565b6040516001600160a01b039091168152602001610255565b34801561029757600080fd5b506102b76102a6366004611bea565b630a85bd0160e11b95945050505050565b6040516001600160e01b03199091168152602001610255565b3480156102dc57600080fd5b506102b76102eb366004611c5c565b6105d9565b3480156102fc57600080fd5b5061021461030b366004611cd5565b6106f4565b34801561031c57600080fd5b5061021461032b366004611d6f565b6108c8565b34801561033c57600080fd5b5061035061034b366004611d8c565b610976565b604051908152602001610255565b34801561036a57600080fd5b50610350610379366004611ddf565b610e33565b34801561038a57600080fd5b5061039e610399366004611e08565b610ecd565b60408051825165ffffffffffff908116825260208085015190911690820152828201516001600160a01b039081169282019290925260609283015190911691810191909152608001610255565b3480156103f757600080fd5b50610214610406366004611e23565b610f67565b34801561041757600080fd5b5061024860405180604001604052806005815260200164181718171960d91b81525081565b34801561044857600080fd5b50610214610457366004611e9a565b6110a3565b34801561046857600080fd5b506102b76111da565b34801561047d57600080fd5b506104866111f0565b60405165ffffffffffff9091168152602001610255565b3480156104a957600080fd5b506102737f000000000000000000000000000000000000000000000000000000000000000081565b3480156104dd57600080fd5b506102b76104ec366004611f19565b63bc197c8160e01b98975050505050505050565b34801561050c57600080fd5b50610350611213565b34801561052157600080fd5b50610214610530366004611e9a565b6112aa565b34801561054157600080fd5b50610214610550366004611e08565b61139e565b34801561056157600080fd5b506102b7610570366004611fd7565b63f23a6e6160e01b9695505050505050565b6000806105b060017f439ffe7df606b78489639bc0b827913bd09e1246fa6802968a5b3694c53e0dd9612068565b92915050565b60006105c0610582565b60010154600160501b90046001600160a01b0316919050565b6000806105e4610582565b6001015460405163199ed7c960e11b8152600160501b9091046001600160a01b03169063333daf929061061f908890889088906004016120a8565b602060405180830381865afa15801561063c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061066091906120cb565b9050600061066d82611442565b905042816020015165ffffffffffff16111561069657506001600160e01b031991506106ed9050565b42816040015165ffffffffffff1610156106bd57506001600160e01b031991506106ed9050565b80516001600160a01b0316156106e057506001600160e01b031991506106ed9050565b50630b135d3f60e11b9150505b9392505050565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016148061072a57503330145b6107465760405162461bcd60e51b815260040161019e906120e4565b60405180608001604052808565ffffffffffff1681526020018465ffffffffffff168152602001876001600160a01b03168152602001866001600160a01b0316815250610791610582565b6001600160e01b031989166000908152600291909101602090815260409182902083518154928501518585015165ffffffffffff9283166001600160601b031990951694909417600160301b9290911691909102176001600160601b0316600160601b6001600160a01b0393841602178155606090930151600190930180546001600160a01b031916938216939093179092555163064acaab60e11b815290861690630c959556906108499085908590600401612131565b600060405180830381600087803b15801561086357600080fd5b505af1158015610877573d6000803e3d6000fd5b50506040516001600160a01b038089169350891691506001600160e01b03198a16907fed03d2572564284398470d3f266a693e29ddfff3eba45fc06c5e91013d32135390600090a450505050505050565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614806108fe57503330145b61091a5760405162461bcd60e51b815260040161019e906120e4565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc8181556040516001600160a01b038316907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a25050565b6000336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146109f05760405162461bcd60e51b815260206004820152601c60248201527f6163636f756e743a206e6f742066726f6d20656e747279506f696e7400000000604482015260640161019e565b6000610a0061014086018661214d565b610a0f91600491600091612193565b610a18916121bd565b9050610a22610582565b6001015460e01b81166001600160e01b03191615610a7a5760405162461bcd60e51b81526020600482015260156024820152741ad95c9b995b0e881b5bd91948191a5cd8589b1959605a1b604482015260640161019e565b6000610a85866122b8565b9050600080610a97606089018961214d565b610aa691600491600091612193565b610aaf916121bd565b90506001600160e01b03198416600003610b4757610acc886122b8565b9250610adc61014089018961214d565b610aea916004908290612193565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250505050610140840152610b2c610582565b60010154600160501b90046001600160a01b03169150610d59565b6001600160e01b03198416600160e01b03610c3d576000610b66610582565b6001600160e01b0319831660009081526002919091016020526040902060018101546001600160a01b03169350905082610bb957610ba2610582565b60010154600160501b90046001600160a01b031692505b610bc76101408a018a61214d565b610bd5916004908290612193565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152505050506101408501525460d081901b6001600160d01b031916600160301b90910460a01b65ffffffffffff60a01b16179450610d59565b6001600160e01b03198416600160e11b03610d4c57610c6061014089018961214d565b610c6f91602491601091612193565b610c78916123c6565b60601c91503660008181610c9985610c946101408f018f61214d565b6114b3565b60405163064acaab60e11b8152949d50929750909550935091506001600160a01b03871690630c95955690610cd49087908790600401612131565b600060405180830381600087803b158015610cee57600080fd5b505af1158015610d02573d6000803e3d6000fd5b5050505081818080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050505061014088015250610d5992505050565b60019450505050506106ed565b8515610dab57604051600090339088908381818185875af1925050503d8060008114610da1576040519150601f19603f3d011682016040523d82523d6000602084013e610da6565b606091505b505050505b610e2785836001600160a01b0316633a871cdd868b8b6040518463ffffffff1660e01b8152600401610ddf939291906123f4565b6020604051808303816000875af1158015610dfe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e2291906120cb565b611864565b98975050505050505050565b604051631aab3f0d60e11b81523060048201526001600160c01b03821660248201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906335567e1a90604401602060405180830381865afa158015610ea9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105b091906120cb565b604080516080810182526000808252602082018190529181018290526060810191909152610ef9610582565b6001600160e01b0319909216600090815260029290920160209081526040928390208351608081018552815465ffffffffffff8082168352600160301b820416938201939093526001600160a01b03600160601b909304831694810194909452600101541660608301525090565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610fdf5760405162461bcd60e51b815260206004820152601c60248201527f6163636f756e743a206e6f742066726f6d20656e747279706f696e7400000000604482015260640161019e565b600060606001836001811115610ff757610ff76124e6565b036110465761103c8786868080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061193792505050565b909250905061108d565b611087878787878080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061196d92505050565b90925090505b8161109a57805160208201fd5b50505050505050565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614806110d957503330145b6110f55760405162461bcd60e51b815260040161019e906120e4565b60006110ff610582565b60010154600160501b90046001600160a01b031690508361111e610582565b6001018054600160501b600160f01b031916600160501b6001600160a01b0393841602179055604051858216918316907fa35f5cdc5fbabb614b4cd5064ce5543f43dc8fab0e4da41255230eb8aba2531c90600090a360405163064acaab60e11b81526001600160a01b03851690630c959556906111a29086908690600401612131565b600060405180830381600087803b1580156111bc57600080fd5b505af11580156111d0573d6000803e3d6000fd5b5050505050505050565b60006111e4610582565b6001015460e01b919050565b60006111fa610582565b60010154640100000000900465ffffffffffff16919050565b604051631aab3f0d60e11b8152306004820152600060248201819052907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906335567e1a90604401602060405180830381865afa158015611281573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112a591906120cb565b905090565b60006112b4610582565b6001810154909150600160501b90046001600160a01b0316156113195760405162461bcd60e51b815260206004820152601c60248201527f6163636f756e743a20616c726561647920696e697469616c697a656400000000604482015260640161019e565b600181018054600160501b600160f01b031916600160501b6001600160a01b038716908102919091179091556040516000907fa35f5cdc5fbabb614b4cd5064ce5543f43dc8fab0e4da41255230eb8aba2531c908290a360405163064acaab60e11b81526001600160a01b03851690630c959556906111a29086908690600401612131565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614806113d457503330145b6113f05760405162461bcd60e51b815260040161019e906120e4565b806113f9610582565b600101805463ffffffff191660e09290921c9190911790554261141a610582565b60010160046101000a81548165ffffffffffff021916908365ffffffffffff16021790555050565b60408051606081018252600080825260208201819052918101919091528160a081901c65ffffffffffff811660000361147e575065ffffffffffff5b604080516060810182526001600160a01b03909316835260d09490941c602083015265ffffffffffff16928101929092525090565b600036818181806114c860586038898b612193565b6114d1916124fc565b9050876058886114e1848361251a565b926114ee93929190612193565b90955093506000888861150284605861251a565b9061150e85607861251a565b9261151b93929190612193565b611524916124fc565b60001c905060006116057f3ce406685c1b3551d706d85a68afdaa49ac4e07b451ad9b8ff8b58c3ee9641768c8c8c60049060249261156493929190612193565b61156d916124fc565b60001c8d8d60249060389261158493929190612193565b61158d916123c6565b60601c8b8b6040516115a0929190612532565b6040519081900381206115ea95949392916020019485526001600160e01b031993909316602085015260408401919091526001600160a01b03166060830152608082015260a00190565b604051602081830303815290604052805190602001206119a5565b90506116ed611612610582565b60010154600160501b90046001600160a01b031663333daf92838d8d61163989607861251a565b90886116468b607861251a565b611650919061251a565b9261165d93929190612193565b6040518463ffffffff1660e01b815260040161167b939291906120a8565b602060405180830381865afa158015611698573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116bc91906120cb565b60a06001600160601b038016901b8c8c6004906024926116de93929190612193565b6116e7916124fc565b16611864565b97508989836116fd86607861251a565b611707919061251a565b611712928290612193565b6040805160808101909152919650945080611731600a60048d8f612193565b61173a91612542565b60d01c81526020016117506010600a8d8f612193565b61175991612542565b60d01c815260200161176f603860248d8f612193565b611778916123c6565b60601c815260200161178e602460108d8f612193565b611797916123c6565b60601c90526117a4610582565b6001600160e01b03198d166000908152600291909101602090815260409182902083518154928501519385015165ffffffffffff9182166001600160601b031990941693909317600160301b9190941602929092176001600160601b0316600160601b6001600160a01b0392831602178255606090920151600190910180546001600160a01b03191691909216179055878a60588b611843878361251a565b9261185093929190612193565b975097509750505050939792965093509350565b6000816001600160a01b0316836001600160a01b031614611887575060016105b0565b60d083901c60a084901c65ffffffffffff81166000036118aa575065ffffffffffff5b60d084901c60a085901c65ffffffffffff81166000036118cd575065ffffffffffff5b8165ffffffffffff168465ffffffffffff1610156118e9578193505b8065ffffffffffff168365ffffffffffff161115611905578092505b60d08465ffffffffffff16901b60a08465ffffffffffff16901b886001600160a01b0316171794505050505092915050565b60006060600080845160208601875af491503d604051602082018101604052818152816000602083013e80925050509250929050565b6000606060008084516020860187895af191503d604051602082018101604052818152816000602083013e8092505050935093915050565b60006105b06119b26119f3565b8360405161190160f01b6020820152602281018390526042810182905260009060620160405160208183030381529060405280519060200120905092915050565b6000306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016148015611a4c57507f000000000000000000000000000000000000000000000000000000000000000046145b15611a7657507f000000000000000000000000000000000000000000000000000000000000000090565b50604080517f00000000000000000000000000000000000000000000000000000000000000006020808301919091527f0000000000000000000000000000000000000000000000000000000000000000828401527f000000000000000000000000000000000000000000000000000000000000000060608301524660808301523060a0808401919091528351808403909101815260c0909201909252805191012090565b6000815180845260005b81811015611b4057602081850181015186830182015201611b24565b81811115611b52576000602083870101525b50601f01601f19169290920160200192915050565b6020815260006106ed6020830184611b1a565b6001600160a01b0381168114611b8f57600080fd5b50565b8035611b9d81611b7a565b919050565b60008083601f840112611bb457600080fd5b5081356001600160401b03811115611bcb57600080fd5b602083019150836020828501011115611be357600080fd5b9250929050565b600080600080600060808688031215611c0257600080fd5b8535611c0d81611b7a565b94506020860135611c1d81611b7a565b93506040860135925060608601356001600160401b03811115611c3f57600080fd5b611c4b88828901611ba2565b969995985093965092949392505050565b600080600060408486031215611c7157600080fd5b8335925060208401356001600160401b03811115611c8e57600080fd5b611c9a86828701611ba2565b9497909650939450505050565b80356001600160e01b031981168114611b9d57600080fd5b803565ffffffffffff81168114611b9d57600080fd5b600080600080600080600060c0888a031215611cf057600080fd5b611cf988611ca7565b96506020880135611d0981611b7a565b95506040880135611d1981611b7a565b9450611d2760608901611cbf565b9350611d3560808901611cbf565b925060a08801356001600160401b03811115611d5057600080fd5b611d5c8a828b01611ba2565b989b979a50959850939692959293505050565b600060208284031215611d8157600080fd5b81356106ed81611b7a565b600080600060608486031215611da157600080fd5b83356001600160401b03811115611db757600080fd5b84016101608187031215611dca57600080fd5b95602085013595506040909401359392505050565b600060208284031215611df157600080fd5b81356001600160c01b03811681146106ed57600080fd5b600060208284031215611e1a57600080fd5b6106ed82611ca7565b600080600080600060808688031215611e3b57600080fd5b8535611e4681611b7a565b94506020860135935060408601356001600160401b03811115611e6857600080fd5b611e7488828901611ba2565b909450925050606086013560028110611e8c57600080fd5b809150509295509295909350565b600080600060408486031215611eaf57600080fd5b8335611eba81611b7a565b925060208401356001600160401b03811115611c8e57600080fd5b60008083601f840112611ee757600080fd5b5081356001600160401b03811115611efe57600080fd5b6020830191508360208260051b8501011115611be357600080fd5b60008060008060008060008060a0898b031215611f3557600080fd5b8835611f4081611b7a565b97506020890135611f5081611b7a565b965060408901356001600160401b0380821115611f6c57600080fd5b611f788c838d01611ed5565b909850965060608b0135915080821115611f9157600080fd5b611f9d8c838d01611ed5565b909650945060808b0135915080821115611fb657600080fd5b50611fc38b828c01611ba2565b999c989b5096995094979396929594505050565b60008060008060008060a08789031215611ff057600080fd5b8635611ffb81611b7a565b9550602087013561200b81611b7a565b9450604087013593506060870135925060808701356001600160401b0381111561203457600080fd5b61204089828a01611ba2565b979a9699509497509295939492505050565b634e487b7160e01b600052601160045260246000fd5b60008282101561207a5761207a612052565b500390565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b8381526040602082015260006120c260408301848661207f565b95945050505050565b6000602082840312156120dd57600080fd5b5051919050565b6020808252602d908201527f6163636f756e743a206e6f742066726f6d20656e747279706f696e74206f722060408201526c37bbb732b91037b91039b2b63360991b606082015260800190565b60208152600061214560208301848661207f565b949350505050565b6000808335601e1984360301811261216457600080fd5b8301803591506001600160401b0382111561217e57600080fd5b602001915036819003821315611be357600080fd5b600080858511156121a357600080fd5b838611156121b057600080fd5b5050820193919092039150565b6001600160e01b031981358181169160048510156121e55780818660040360031b1b83161692505b505092915050565b634e487b7160e01b600052604160045260246000fd5b60405161016081016001600160401b0381118282101715612226576122266121ed565b60405290565b600082601f83011261223d57600080fd5b81356001600160401b0380821115612257576122576121ed565b604051601f8301601f19908116603f0116810190828211818310171561227f5761227f6121ed565b8160405283815286602085880101111561229857600080fd5b836020870160208301376000602085830101528094505050505092915050565b600061016082360312156122cb57600080fd5b6122d3612203565b6122dc83611b92565b81526020830135602082015260408301356001600160401b038082111561230257600080fd5b61230e3683870161222c565b6040840152606085013591508082111561232757600080fd5b6123333683870161222c565b60608401526080850135608084015260a085013560a084015260c085013560c084015260e085013560e0840152610100915081850135828401526101209150818501358181111561238357600080fd5b61238f3682880161222c565b8385015250610140915081850135818111156123aa57600080fd5b6123b63682880161222c565b8385015250505080915050919050565b6001600160601b031981358181169160148510156121e55760149490940360031b84901b1690921692915050565b6060815261240e6060820185516001600160a01b03169052565b60208401516080820152600060408501516101608060a08501526124366101c0850183611b1a565b91506060870151605f19808685030160c08701526124548483611b1a565b9350608089015160e087015260a08901519150610100828188015260c08a01519250610120838189015260e08b0151935061014084818a0152828c0151868a0152818c0151955083898803016101808a01526124b08787611b1a565b9650808c0151955050505080868503016101a087015250506124d28282611b1a565b602085019690965250505060400152919050565b634e487b7160e01b600052602160045260246000fd5b803560208310156105b057600019602084900360031b1b1692915050565b6000821982111561252d5761252d612052565b500190565b8183823760009101908152919050565b6001600160d01b031981358181169160068510156121e55760069490940360031b84901b169092169291505056fea264697066735822122044b48188a0ed19bf69bdfa15696fce6ea52d2980b93dd6e91712e2f63967796364736f6c634300080e00330000000000000000000000005ff137d4b0fdcd49dca30c7cf57e578a026d278900000000000000000000000014a725839184f879f3c09ce3d707e5a3e4c5869d0000000000000000000000007884f7f04f994da14302a16cf15e597e31eebecf",
            SALT
        );
        require(
            factory == 0xAEE9762ce625E0a8F7b184670fB57C37BFE1d0f1,
            "FACTORY_ADDRESS_MISMATCH"
        );
        _write(vm, "CyberAccount Factory", factory);

        setSoulMinter(
            vm,
            0x14A725839184F879f3C09cE3d707e5a3E4C5869d,
            factory,
            true
        );
        setSoulMinter(
            vm,
            0x14A725839184F879f3C09cE3d707e5a3E4C5869d,
            backendSigner,
            true
        );
    }

    function deployAll(
        Vm vm,
        address _dc,
        address protocolOwner,
        address treasuryReceiver,
        address soulManager,
        address entryPoint,
        address backendSigner,
        bool writeFile
    ) internal {
        // sending from deployer
        ContractAddresses memory contractAddresses = deployGraph(
            vm,
            _dc,
            protocolOwner,
            treasuryReceiver,
            soulManager,
            writeFile
        );

        deployPermissionMw(
            vm,
            _dc,
            contractAddresses.engine,
            contractAddresses.manager
        );
        deployValidator(vm, _dc);
        address factory = deployFactory(
            vm,
            _dc,
            entryPoint,
            contractAddresses.soul,
            protocolOwner,
            writeFile
        );
        deployReceiver(vm, _dc, protocolOwner, writeFile);
        deployMultiSend();
        deployPaymaster(vm, _dc, entryPoint, protocolOwner, backendSigner);
    }

    function setInitialState(
        Vm vm,
        address _dc,
        address mwManager,
        address permissionMw,
        address soul,
        address factory,
        address cyberpaymaster,
        address backendSigner
    ) internal {
        // sending from protocol owner
        MiddlewareManager(mwManager).allowMw(permissionMw, true);
        setSoulMinter(vm, soul, factory, true);
        setSoulMinter(vm, soul, backendSigner, true);
        // CyberAccountFactory(factory).addStake{ value: 0.1 ether }(1 days);
        CyberPaymaster(payable(cyberpaymaster)).setVerifyingSigner(
            backendSigner
        );
        // CyberPaymaster(payable(paymaster)).addStake{ value: 10 ether }(1 days);
    }

    function deployPaymaster(
        Vm vm,
        address _dc,
        address entryPoint,
        address owner,
        address signer
    ) internal {
        Create2Deployer dc = Create2Deployer(_dc);
        address paymaster = dc.deploy(
            abi.encodePacked(
                type(CyberPaymaster).creationCode,
                abi.encode(entryPoint, owner)
            ),
            SALT
        );
        _write(vm, "CyberPaymaster", paymaster);
    }

    function deployLaunchTokenPool(
        Vm vm,
        address _dc,
        address owner,
        address cyber
    ) internal {
        Create2Deployer dc = Create2Deployer(_dc);
        address launchTokenPool = dc.deploy(
            abi.encodePacked(
                type(LaunchTokenPool).creationCode,
                abi.encode(owner, cyber)
            ),
            SALT
        );

        _write(vm, "LaunchTokenPool", launchTokenPool);
    }

    function deployStakingPool(
        Vm vm,
        address _dc,
        address weth,
        address owner
    ) internal {
        Create2Deployer dc = Create2Deployer(_dc);
        address stakingPool = dc.deploy(
            abi.encodePacked(
                type(CyberStakingPool).creationCode,
                abi.encode(weth, owner)
            ),
            SALT
        );

        _write(vm, "CyberStakingPool", stakingPool);
    }

    function deployGasBridge(Vm vm, address _dc, address owner) internal {
        Create2Deployer dc = Create2Deployer(_dc);
        address gasBridge = dc.deploy(
            abi.encodePacked(type(GasBridge).creationCode, abi.encode(owner)),
            SALT
        );

        _write(vm, "GasBridge", gasBridge);
    }

    function deployCyberRelayer(
        Vm vm,
        address _dc,
        address owner,
        address backendSigner
    ) internal {
        Create2Deployer dc = Create2Deployer(_dc);
        address cyberRelayer = dc.deploy(
            abi.encodePacked(
                type(CyberRelayer).creationCode,
                abi.encode(owner)
            ),
            SALT
        );

        CyberRelayer(cyberRelayer).grantRole(
            keccak256("RELAYER_ROLE"),
            backendSigner
        );

        _write(vm, "CyberRelayer", cyberRelayer);
    }

    function deployCyberNewEraGate(
        Vm vm,
        address _dc,
        address owner,
        uint256 mintFee
    ) internal {
        Create2Deployer dc = Create2Deployer(_dc);
        address CyberNewEraGate = dc.deploy(
            abi.encodePacked(
                type(CyberNewEraGate).creationCode,
                abi.encode(owner, mintFee)
            ),
            SALT
        );

        _write(vm, "CyberNewEraGate", CyberNewEraGate);
    }

    function deployCyberNewEra(
        Vm vm,
        address _dc,
        address owner,
        address signer,
        string memory baseUri
    ) internal {
        Create2Deployer dc = Create2Deployer(_dc);
        address CyberNewEra = dc.deploy(
            abi.encodePacked(
                type(CyberNewEra).creationCode,
                abi.encode(baseUri, owner, signer)
            ),
            SALT
        );

        _write(vm, "CyberNewEra", CyberNewEra);
    }

    function upgradeVault(Vm vm, address _dc, address vaultProxy) internal {
        Create2Deployer dc = Create2Deployer(_dc);
        address cyberVaultV3Impl = dc.deploy(
            type(CyberVaultV3).creationCode,
            SALT
        );
        _write(vm, "CyberVaultV3(Impl)", cyberVaultV3Impl);

        UUPSUpgradeable(vaultProxy).upgradeTo(cyberVaultV3Impl);

        address[] memory wl = new address[](2);
        wl[0] = address(0x0b2C639c533813f4Aa9D7837CAf62653d097Ff85);
        wl[1] = address(0x4200000000000000000000000000000000000006);
        bool[] memory wlStatus = new bool[](2);
        wlStatus[0] = true;
        wlStatus[1] = true;

        CyberVaultV3(vaultProxy).setV3Variables(
            address(0xCb1355ff08Ab38bBCE60111F1bb2B784bE25D7e8),
            address(0x4200000000000000000000000000000000000006),
            address(0x94b008aA00579c1307B0EF2c499aD98a8ce58e58),
            wl,
            wlStatus
        );
    }

    function deployVault(
        Vm vm,
        address _dc,
        address owner,
        address recipient,
        address operator,
        address uniswap,
        address wrappedNativeCurrency,
        address tokenOut,
        address[] memory tokenInList,
        bool[] memory tokenInApproved
    ) internal {
        Create2Deployer dc = Create2Deployer(_dc);

        address cyberVaultImpl = dc.deploy(
            type(CyberVaultV3).creationCode,
            SALT
        );

        _write(vm, "CyberVault(Impl)", cyberVaultImpl);

        address cyberVaultProxy = dc.deploy(
            abi.encodePacked(
                type(ERC1967Proxy).creationCode,
                abi.encode(
                    cyberVaultImpl,
                    abi.encodeWithSelector(
                        CyberVault.initialize.selector,
                        owner,
                        recipient
                    )
                )
            ),
            SALT
        );

        _write(vm, "CyberVault(Proxy)", cyberVaultProxy);

        CyberVaultV3(cyberVaultProxy).grantRole(
            keccak256(bytes("OPERATOR_ROLE")),
            operator
        );

        CyberVaultV3(cyberVaultProxy).setV3Variables(
            uniswap,
            wrappedNativeCurrency,
            tokenOut,
            tokenInList,
            tokenInApproved
        );
    }

    function deployWorkInCryptoNFT(
        Vm vm,
        address _dc,
        string memory name,
        string memory symbol,
        string memory uri,
        address protocolOwner,
        address signer,
        bool writeFile
    ) internal {
        Create2Deployer dc = Create2Deployer(_dc);
        address tr = dc.deploy(
            abi.encodePacked(
                type(WorkInCryptoNFT).creationCode,
                abi.encode(name, symbol, uri, protocolOwner, signer)
            ),
            SALT
        );

        if (writeFile) {
            _write(vm, "WorkInCryptoNFT", tr);
        }
    }

    function deployGraph(
        Vm vm,
        address _dc,
        address protocolOwner,
        address treasuryReceiver,
        address soulManager,
        bool writeFile
    ) internal returns (ContractAddresses memory addrs) {
        Create2Deployer dc = Create2Deployer(_dc);

        // 1. deploy soul
        addrs.soul = dc.deploy(
            abi.encodePacked(
                type(Soul).creationCode,
                abi.encode(soulManager, "CyberSoul", "SOUL")
            ),
            SALT
        );

        // 2. deploy mw manager
        addrs.manager = dc.deploy(
            abi.encodePacked(
                type(MiddlewareManager).creationCode,
                abi.encode(protocolOwner)
            ),
            SALT
        );

        // 3. pre-compute ess,content,w3st addresses
        addrs.deployer = dc.deploy(
            abi.encodePacked(type(Deployer).creationCode),
            SALT
        );

        addrs.subscribeDeployer = dc.deploy(
            abi.encodePacked(type(SubscribeDeployer).creationCode),
            SALT
        );

        addrs.calculatedEssImpl = _computeAddress(
            abi.encodePacked(type(Essence).creationCode),
            SALT,
            addrs.deployer
        );

        addrs.calculatedContentImpl = _computeAddress(
            abi.encodePacked(type(Content).creationCode),
            SALT,
            addrs.deployer
        );

        addrs.calculatedW3stImpl = _computeAddress(
            abi.encodePacked(type(W3st).creationCode),
            SALT,
            addrs.deployer
        );

        addrs.calculatedSubImpl = _computeAddress(
            abi.encodePacked(type(Subscribe).creationCode),
            SALT,
            addrs.subscribeDeployer
        );

        // 4. deploy engine
        addrs.engineImpl = dc.deploy(type(CyberEngine).creationCode, SALT);
        addrs.engine = dc.deploy(
            abi.encodePacked(
                type(ERC1967Proxy).creationCode,
                abi.encode(
                    addrs.engineImpl,
                    abi.encodeWithSelector(
                        CyberEngine.initialize.selector,
                        DataTypes.InitParams(
                            addrs.soul,
                            addrs.manager,
                            addrs.calculatedEssImpl,
                            addrs.calculatedContentImpl,
                            addrs.calculatedW3stImpl,
                            addrs.calculatedSubImpl,
                            protocolOwner
                        )
                    )
                )
            ),
            SALT
        );

        // 5. deploy ess,content and w3st
        addrs.deployedEssImpl = IDeployer(addrs.deployer).deployEssence(
            SALT,
            addrs.engine
        );
        require(
            addrs.deployedEssImpl == addrs.calculatedEssImpl,
            "WRONG_ESS_ADDR"
        );

        addrs.deployedContentImpl = IDeployer(addrs.deployer).deployContent(
            SALT,
            addrs.engine
        );
        require(
            addrs.deployedContentImpl == addrs.calculatedContentImpl,
            "WRONG_CONTENT_ADDR"
        );

        addrs.deployedW3stImpl = IDeployer(addrs.deployer).deployW3st(
            SALT,
            addrs.engine
        );
        require(
            addrs.deployedW3stImpl == addrs.calculatedW3stImpl,
            "WRONG_W3ST_ADDR"
        );

        addrs.deployedSubImpl = ISubscribeDeployer(addrs.subscribeDeployer)
            .deploySubscribe(SALT, addrs.engine);
        require(
            addrs.deployedSubImpl == addrs.calculatedSubImpl,
            "WRONG_SUB_ADDR"
        );

        // 6. deploy treasury
        addrs.cyberTreasury = dc.deploy(
            abi.encodePacked(
                type(Treasury).creationCode,
                abi.encode(protocolOwner, treasuryReceiver, 250)
            ),
            SALT
        );

        if (writeFile) {
            _write(vm, "Soul", addrs.soul);
            _write(vm, "MiddlewareManager", addrs.manager);
            _write(vm, "Deployer", addrs.deployer);
            _write(vm, "SubscribeDeployer", addrs.subscribeDeployer);
            _write(vm, "CyberEngineImpl", addrs.engineImpl);
            _write(vm, "CyberEngine", addrs.engine);
            _write(vm, "Essence", addrs.deployedEssImpl);
            _write(vm, "Content", addrs.deployedContentImpl);
            _write(vm, "W3ST", addrs.deployedW3stImpl);
            _write(vm, "Subscribe", addrs.deployedSubImpl);
            _write(vm, "Treasury", addrs.cyberTreasury);
        }
    }

    function deployReceiver(
        Vm vm,
        address _dc,
        address protocolOwner,
        bool writeFile
    ) internal {
        Create2Deployer dc = Create2Deployer(_dc);
        address tr = dc.deploy(
            abi.encodePacked(
                type(TokenReceiver).creationCode,
                abi.encode(protocolOwner)
            ),
            SALT
        );

        if (writeFile) {
            _write(vm, "TokenReceiver", tr);
        }
    }

    function deployTimeLock(
        Vm vm,
        address ownerSafe,
        uint256 minDeplay,
        bool writeFile
    ) internal returns (address lock) {
        require(ownerSafe != address(0), "WRONG_OWNER");

        address[] memory proposers = new address[](1);
        proposers[0] = ownerSafe;
        address[] memory executors = new address[](1);
        executors[0] = ownerSafe;

        lock = address(
            new TimelockController(minDeplay, proposers, executors, ownerSafe)
        );
        if (writeFile) {
            _write(vm, "Timelock(V2)", lock);
        }
    }

    function deployFrog(Vm vm) internal returns (address frog) {
        // frog = address(
        //     new CyberFrog("https://remote-image.decentralized-content.com/image?url=https%3A%2F%2Fmagic.decentralized-content.com%2Fipfs%2Fbafkreihs6j3o5g7rab7yt5ml2xukkfsl2f2yeopyoskebozw7u5fiuuoiq&w=1920&q=75")
        // );
        // CyberFrog(address(0xFE98bA9D562F8359981269c9E22fDBf02717b723)).mint(address(0x8ddD03b89116ba89E28Ef703fe037fF77451e38E), 1, 1, "");
        //_write(vm, "CyberFrog", frog);
    }

    function deployCyberNFTGate(Vm vm, address _dc, address owner) internal {
        Create2Deployer dc = Create2Deployer(_dc);
        address cyberNFTGate = dc.deploy(
            abi.encodePacked(
                type(CyberNFTGate).creationCode,
                abi.encode(owner)
            ),
            SALT
        );

        CyberNFTGate(cyberNFTGate).setNFTConfig(
            0x5239edBdAFEdDD6A6659E74A99Bf99eD32717184,
            true,
            0.00003 ether
        );

        _write(vm, "CyberNFTGate", cyberNFTGate);
    }

    function deployCyberRelayGate(Vm vm, address _dc, address owner) internal {
        Create2Deployer dc = Create2Deployer(_dc);

        address cyberRelayGateImpl = dc.deploy(
            type(CyberRelayGate).creationCode,
            SALT
        );

        _write(vm, "CyberRelayGate(Impl)", cyberRelayGateImpl);

        address cyberRelayGateProxy = dc.deploy(
            abi.encodePacked(
                type(ERC1967Proxy).creationCode,
                abi.encode(
                    cyberRelayGateImpl,
                    abi.encodeWithSelector(
                        CyberRelayGate.initialize.selector,
                        owner
                    )
                )
            ),
            SALT
        );

        _write(vm, "CyberRelayGate(Proxy)", cyberRelayGateProxy);
    }

    function upgradeCyberNFT(
        Vm vm,
        address _dc,
        address nftProxy,
        address recipient
    ) internal {
        Create2Deployer dc = Create2Deployer(_dc);
        address cyberNFTV2Impl = dc.deploy(type(CyberNFTV2).creationCode, SALT);
        _write(vm, "CyberNFTV2(Impl)", cyberNFTV2Impl);

        UUPSUpgradeable(nftProxy).upgradeTo(cyberNFTV2Impl);

        CyberNFTV2(nftProxy).setRecipient(recipient);
        CyberNFTV2(nftProxy).setMintPriceConfig(2, true, 0.0002 ether);
        CyberNFTV2(nftProxy).setMintPriceConfig(3, true, 0.0002 ether);
    }

    function deployCyberNFT(Vm vm, address _dc, address owner) internal {
        Create2Deployer dc = Create2Deployer(_dc);
        address cyberNFTImpl = dc.deploy(type(CyberNFT).creationCode, SALT);

        _write(vm, "CyberNFT(Impl)", cyberNFTImpl);

        address cyberNFT = dc.deploy(
            abi.encodePacked(
                type(ERC1967Proxy).creationCode,
                abi.encode(
                    cyberNFTImpl,
                    abi.encodeWithSelector(CyberNFT.initialize.selector, owner)
                )
            ),
            SALT
        );

        CyberNFT(cyberNFT).setURI(
            "https://metadata.cyberconnect.dev/nfts/general-nfts/"
        );

        CyberNFT(cyberNFT).grantRole(
            keccak256("MANAGER_ROLE"),
            0x0e3Ba6BE9b3AAf4c6dE0C9AEe2b2c565E29437Ae
        );

        _write(vm, "CyberNFT", cyberNFT);
    }

    function deploySnakeRelayHook(
        Vm vm,
        address _dc,
        address recipient,
        address relayGate
    ) internal {
        Create2Deployer dc = Create2Deployer(_dc);
        address snakeRelayHook = dc.deploy(
            abi.encodePacked(
                type(SnakeRelayHook).creationCode,
                abi.encode(recipient)
            ),
            SALT
        );

        _write(vm, "SnakeRelayHook", snakeRelayHook);

        CyberRelayGate relatGate = CyberRelayGate(relayGate);

        relatGate.setDestination(
            0x000000000000000000000000000000000000dEaD,
            true,
            snakeRelayHook
        );
    }

    function deployCyberIdRelayHook(
        Vm vm,
        address _dc,
        address owner,
        address signer,
        address relayGate,
        address cyberId,
        address recipient,
        address usdOracle
    ) internal {
        (
            uint80 roundId,
            int256 price,
            ,
            uint256 updatedAt,

        ) = AggregatorV3Interface(usdOracle).latestRoundData();
        require(roundId != 0, "INVALID_ORACLE_ROUND_ID");
        require(price > 2400 * 1e8, "INVALID_ORACLE_PRICE");
        require(updatedAt > block.timestamp - 24 hours, "STALE_ORACLE_PRICE");
        Create2Deployer dc = Create2Deployer(_dc);
        address cyberIdRelayHook = dc.deploy(
            abi.encodePacked(
                type(CyberIDPermissionedRelayHook).creationCode,
                abi.encode(owner, signer, usdOracle)
            ),
            SALT
        );

        _write(vm, "CyberIDPermissionedRelayHook", cyberIdRelayHook);

        CyberRelayGate relatGate = CyberRelayGate(relayGate);

        relatGate.setDestination(cyberId, true, cyberIdRelayHook);

        CyberIDPermissionedRelayHook hook = CyberIDPermissionedRelayHook(
            cyberIdRelayHook
        );

        hook.configPrices(
            recipient,
            [uint256(100 ether), 40 ether, 10 ether, 4 ether]
        );
    }

    function deployNFTRelayHook(
        Vm vm,
        address _dc,
        address owner,
        address relayGate,
        address nft,
        address recipient
    ) internal {
        Create2Deployer dc = Create2Deployer(_dc);
        address nftRelayHook = dc.deploy(
            abi.encodePacked(
                type(CyberMintNFTRelayHook).creationCode,
                abi.encode(owner)
            ),
            SALT
        );
        require(
            nftRelayHook == 0x9da98CC2655aEEfC9f56043C184ce8C87652a196,
            "WRONG_NFT_RELAY_HOOK"
        );
        // address nftRelayHook = 0x9da98CC2655aEEfC9f56043C184ce8C87652a196;

        _write(vm, "CyberMintNFTRelayHook", nftRelayHook);

        CyberRelayGate relatGate = CyberRelayGate(relayGate);

        relatGate.setDestination(nft, true, nftRelayHook);

        CyberMintNFTRelayHook hook = CyberMintNFTRelayHook(nftRelayHook);

        // eth
        hook.configMintFee(nft, 2, address(0), true, recipient, 0.0002 ether);
        hook.configMintFee(nft, 3, address(0), true, recipient, 0.0002 ether);
    }

    function deployCyberProjectNFTV2(
        Vm vm,
        address _dc,
        address owner,
        address cyber
    ) internal {
        Create2Deployer dc = Create2Deployer(_dc);
        address ssBonusWeek = dc.deploy(
            abi.encodePacked(
                type(SSBonusWeek).creationCode,
                abi.encode(owner, cyber)
            ),
            SALT
        );

        _write(vm, "SSBonusWeek", ssBonusWeek);
    }

    function changeOwnership(
        Vm vm,
        address timelock,
        address receiver
    ) internal {
        // Receiver owner role change to timelock
        TokenReceiver(receiver).transferOwnership(timelock);
        require(
            TokenReceiver(receiver).owner() == timelock,
            "WRONG_RECEIVER_OWNER"
        );
    }

    function withdraw(
        Vm vm,
        address timelock,
        address receiver,
        address to
    ) internal {
        // string memory hexData = "0xf3fef3a3000000000000000000000000ad09648a3b2e725d606c6440ef3d1fb9693bac1b00000000000000000000000000000000000000000000000000005af3107a4000"; prev

        // string memory hexData = "0xf3fef3a30000000000000000000000007884f7f04f994da14302a16cf15e597e31eebecf0000000000000000000000000000000000000000000000019274b259f6540000";
        // bytes memory b = abi.encodePacked(hexData);

        bytes
            memory b = hex"f3fef3a30000000000000000000000007884f7f04f994da14302a16cf15e597e31eebecf0000000000000000000000000000000000000000000000019274b259f6540000";
        // TimelockController(payable(timelock)).schedule(
        //     receiver,
        //     0,
        //     b,
        //     0x0000000000000000000000000000000000000000000000000000000000000000,
        //     0x0000000000000000000000000000000000000000000000000000000000000000,
        //     48 * 3600 + 1
        // );

        TimelockController(payable(timelock)).execute(
            receiver,
            0,
            b,
            0x0000000000000000000000000000000000000000000000000000000000000000,
            0x0000000000000000000000000000000000000000000000000000000000000000
        );
    }

    function deployInTest(
        Vm vm,
        address protocolOwner,
        address treasuryReceiver,
        address entryPoint
    ) internal returns (ContractAddresses memory addrs) {
        Create2Deployer dc = new Create2Deployer();
        addrs = deployGraph(
            vm,
            address(dc),
            protocolOwner,
            treasuryReceiver,
            address(this),
            false
        );
        addrs.cyberFactory = deployFactory(
            vm,
            address(dc),
            entryPoint,
            addrs.soul,
            protocolOwner,
            false
        );
    }
}
